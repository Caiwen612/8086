;include Assg/function.inc
.MODEL SMALL 
.STACK 100 
.386
.DATA 
 ;--------------------------------FOOD MENU--------------------------------;
 ;----GLOBAL VARIABLE---;
 ;-------------------------------PROMPT MESSAGE----------------------------;
 F_CHOOSE            DB 13,10,13,10,"PLEASE CHOOSE WHAT YOU WANT: $" ;
 F_QUANTITY          DB 13,10,13,10,"PLEASE CHOOSE YOUR QUANTITY(0-9): $" ;
 F_TOTAL             DB 13,10,13,10,"YOUR TOTAL IS RM$"
 F_FLOATING          DB ".00$"
 F_CONTINUE          DB 13,10,13,10,"REMINDER: DON'T WASTE FOOD. ^-^ "
                     DB 13,10,"DO YOU WANT MORE? (Y/N) $"
 ;ARRAY TO STORE FOOD SELECTION WHICH TYPE BY USER
 I_FOOD          LABEL   BYTE
 MAX_FOOD        DB       2
 ACT_FOOD        DB       ?
 FOOD            DB       2 DUP (0)
;-----------------------------------------
 ;ARRAY TO STORE QUANTITY WHICH TYPE BY USER
 I_QUANTITY      LABEL  BYTE
 MAX_QUANTITY    DB      3
 ACT_QUANTITY    DB      ?
 QUANTITY        DB      3 DUP (0)
 ;--------------------------------------------
;ARRAY TO STORE CONTINUE SELECTION WHICH TYPE BY USER
 I_CONTINUE          LABEL   BYTE
 MAX_CONTINUE        DB       2
 ACT_CONTINUE        DB       ?
 CONTINUE            DB       2 DUP (0)
;--------------------------------------------
 ;FOOD PRICE LIST AND FOOD PRICE
 FOOD_PRICE_LIST          DB 3,4,5,6,7 ;0=nasi lemak
 FOOD_PRICE               DB ?
 ;--CALC
 SUM                      DB ? 
 TEN                      DB 10 
 
 ;--TOTAL RESULTS
 ONES                     DB 0 
 TENS                     DB 0 
 HUNDREDS                 DB 0 
 QUANTITY_TENS            DB 0 
 QUANTITY_ONES            DB 0 
.CODE 
MAIN PROC 
 MOV AX,@DATA 
 MOV DS,AX 
FOODCHOOSE:
;PROMPT FOR USER INPUT FOOD CHOOSE
 MOV AH,09H
 LEA DX,F_CHOOSE    
 INT 21H
;CHECK USER INPUT
 MOV AH,0AH
 LEA DX,I_FOOD
 INT 21H

MOV SI,0 
;FIND WHICH FOOD YOU ARE CHOOSING
FOODSELECTION:
    CMP FOOD[SI],"1"
    JE NASILEMAK
    CMP FOOD[SI],"2"
    JE SANDWICH

;FIND VALUE OF FOOD PRICE
NASILEMAK:
    MOV DX,0 ; CLEAR 0
    MOV DL,FOOD_PRICE_LIST[0] ;GET THE FIRST ITEM FROM PRICE LIST
    ADD DL,30H ;DEC CONVERT TO HEX(BEFORE CALCULATION) MAYBE NEED SUB
    MOV FOOD_PRICE,DL
    ;NEWLINE
    MOV AH,02H
    MOV DL,13
    INT 21H
    MOV DL,10
    INT 21H
    ;OUTPUT PRICE
    MOV DL,FOOD_PRICE
    INT 21H
    JMP FOODQUANTITY
SANDWICH:
    MOV DX,0 ; CLEAR 0
    MOV DL,FOOD_PRICE_LIST[1]
    ADD DL,30H ;DEC CONVERT TO HEX(BEFORE CALCULATION) MAYBE NEED SUB
    MOV FOOD_PRICE,DL
    ;NEWLINE
    MOV AH,02H
    MOV DL,0DH
    INT 21H
    MOV DL,0AH
    INT 21H
    ;OUTPUT PRICE
    MOV DL,FOOD_PRICE
    INT 21H
    JMP FOODQUANTITY
FOODQUANTITY:
;PROMPT FOR USER INPUT QUANTITY
 MOV AH,09H
 LEA DX,F_QUANTITY
 INT 21H
;CHECK USER INPUT FOR QUANTITY
 MOV AH,0AH
 LEA DX,I_QUANTITY
 INT 21H

;CHECK USER INPUT HOW MANY DIGIT FOR QUANTITY
ADD ACT_QUANTITY,30H;CONVERT DEC TO HEX
CMP ACT_QUANTITY,"1"
JE SINGLE
CMP ACT_QUANTITY,"2"
JE DOUBLE

SINGLE:
    ;NEWLINE
    ; MOV AH,02H
    ; MOV DL,0DH
    ; INT 21H
    ; MOV DL,0AH
    ; INT 21H
    ; MOV AX,0 ;CLEAR 0
    ;SUB QUANTITY,30H 
    ; MOV AH,02H
    ; MOV DL,QUANTITY
    ; INT 21H
    JMP CALC
DOUBLE:
    ;NEWLINE
    MOV AH,02H
    MOV DL,0DH
    INT 21H
    MOV DL,0AH
    INT 21H
    ; ;END NEWLINE
    ; MOV QUANTITY_TENS, QUANTITY[0]
    ; MOV QUANTITY_ONES, QUANTITY[1]
    JMP EXIT

; CALC3:
; ;---CONVERT TO HEX TO DEC
;     SUB QUANTITY_TENS, 30H
;     SUB QUANTITY_ONES, 30H
;     SUB FOOD_PRICE, 30H
; ;---CLEAR AX
;     MOV AX,0
; ;---MOVE Quantity BECOME MULTIPLICANT
;     MOV AL,QUANTITY_TENS  ;AL=1 
; ;--MOVE Quantity BECOME MULTIPLICANT
;     MUL TEN ;AX= 1 * 10 = 10
; ;--ADD QTY
;     ADD AL,QTY_ONES ;AL = 10 + 5
; ;--MULTIPLY MULTICAND WITH MULTIPLIER (F_P)
;     MUL FOOD_PRICE
; ;--MOV RESULT FROM AL TO SUM
;     MOV SUM,AL
; ;--MOVE DIVIDED TO AL 
;     MOV AL,SUM ;AL=SUM
; ;--DIVIDE DIVIDEND BY DIVISOR    
;     DIV TEN ;AX= AX/TEN = SUM/10 =R1Q1=>5(AH=R1),10(AL=Q1) 
; ;--MOVE RESULT INTO Q1 & R1
;     MOV HUNDREDS,AL
;     MOV ONES,AH
; ;-----SEPERATE 2 DIGITS INTO TENS AND ONE
;     MOV AX,0
;     MOV AL,TENS 
;     DIV TEN
; ;----
;     MOV HUNDRED,AL
;     MOV TENS,AH
; ;----
;     ADD HUNDREDS,30H
;     ADD TENS,30H
;     ADD ONES,30H
; ;
; ;--PROMPT OUTPUT
;     MOV AH,09H
;     LEA DX,F_TOTAL
;     INT 21H
;     ;--SHOW RESULT
;     MOV AH,02H
;     MOV DL,HUNDREDS
;     INT 21H
;     MOV AH,02H
;     MOV DL,TENS
;     INT 21H
;     MOV AH,02H
;     MOV DL,ONES
;     INT 21H


CALC:
;---CONVERT HEX TO DEC
    SUB FOOD_PRICE,30H
    SUB QUANTITY,30H
;--CLEAR AX BECOME 0
    MOV AX,0
;--MOVE Quantity BECOME MULTIPLICANT
    MOV AL,QUANTITY
;--MOVE PRICE BECOME MULTIPLIER 
    MUL FOOD_PRICE
;--MOV RESULT TO VARIABLE
    MOV SUM,AL
    ; JMP ADDTOTAL 
    ;ADD SUM,30H MOVE NEXTLINE
;----IF SUM > 9 , JUMP ANOTHER CALCULATION (!!!)
    CALC2:;COMPARE DECIMAL VALUE
        CMP SUM,9
        JG SEPERATE2DIGIT ;IF > 9 , GO DO ANOTHER CALCULATION
        JL S_DIGIT         ;IF < 9 , CONTINUE BELOW CODE
; ADDTOTAL:
    
S_DIGIT:
    ADD SUM,30H
;--PROMPT OUTPUT
    MOV AH,09H
    LEA DX,F_TOTAL
    INT 21H
;--SHOW RESULT
    MOV AH,02H
    MOV DL,SUM
    INT 21H
;--PROMPT FLOATING
    MOV AH,09H
    LEA DX,F_FLOATING
    INT 21H
    JMP FOODCONTINUE

SEPERATE2DIGIT:
    MOV AX,0
    MOV AL,SUM
    DIV TEN
    MOV TENS,AL
    MOV ONES,AH
    ADD TENS,30H
    ADD ONES,30H
    ;--PROMPT OUTPUT
    MOV AH,09H
    LEA DX,F_TOTAL
    INT 21H
    ;--SHOW RESULT
    MOV AH,02H
    MOV DL,TENS
    INT 21H
    MOV AH,02H
    MOV DL,ONES
    INT 21H
    ;--PROMPT FLOATING
    MOV AH,09H
    LEA DX,F_FLOATING
    INT 21H
    JMP FOODCONTINUE

FOODCONTINUE:
;PROMPT FOR CONTINUE
MOV AH,09H
LEA DX,F_CONTINUE
INT 21H
;CHECK USER INPUT
MOV AH,0AH
LEA DX,I_CONTINUE
INT 21H

MOV SI,0
;FIND DO YOU WANT CONTINUE OR NOT
CONTINUESELECTION:
    CMP CONTINUE[SI],'y'
    JE CAPLOCK
    CMP CONTINUE[SI],'n'
    JE CAPLOCK
    CMP CONTINUE[SI],'Y'
    JE FOODCHOOSE
    CMP CONTINUE[SI],'N'
    JE EXIT
    
;IN CASE USER ENTER THE LOWER LETTER
CAPLOCK:
    SUB CONTINUE[SI],20H 
    JMP CONTINUESELECTION

EXIT:
 MOV AH,4CH 
 INT 21H 
MAIN ENDP
 END MAIN